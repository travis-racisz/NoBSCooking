{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { IntlService } from './IntlService';\nimport { IntlContext } from './IntlContext'; // tslint:disable:max-line-length\n\n/**\n * A React component which provides an internationalization service. Expects a locale string as a property of the component.\n */\n\nvar IntlProvider =\n/** @class */\nfunction (_super) {\n  __extends(IntlProvider, _super);\n\n  function IntlProvider() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * Returns an internationalization service. The method is suitable for overriding when you implement custom internationalization behavior.\n   */\n\n\n  IntlProvider.prototype.getIntlService = function () {\n    return new IntlService(this.props.locale);\n  };\n  /**\n   * @hidden\n   */\n\n\n  IntlProvider.prototype.getChildContext = function () {\n    return {\n      kendoIntlService: this.getIntlService()\n    };\n  };\n  /**\n   * @hidden\n   */\n\n\n  IntlProvider.prototype.render = function () {\n    return React.createElement(IntlContext.Provider, {\n      value: this.getIntlService()\n    }, React.Children.only(this.props.children));\n  };\n  /**\n   * @hidden\n   */\n\n\n  IntlProvider.propTypes = {\n    locale: PropTypes.string\n  };\n  /**\n   * @hidden\n   */\n\n  IntlProvider.childContextTypes = {\n    kendoIntlService: PropTypes.object\n  };\n  return IntlProvider;\n}(React.Component);\n\nexport default IntlProvider; // tslint:enable:max-line-length","map":{"version":3,"sources":["../../../src/Intl/IntlProvider.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,OAAO,KAAK,SAAZ,MAA2B,YAA3B;AAEA,SAAS,WAAT,QAA4B,eAA5B;AAGA,SAAS,WAAT,QAA4B,eAA5B,C,CAEA;;AACA;;;;AAGA,IAAA,YAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA0C,EAAA,SAAA,CAAA,YAAA,EAAA,MAAA,CAAA;;AAA1C,WAAA,YAAA,GAAA;;AAyCC;AA1BG;;;;;AAGA,EAAA,YAAA,CAAA,SAAA,CAAA,cAAA,GAAA,YAAA;AACI,WAAO,IAAI,WAAJ,CAAgB,KAAK,KAAL,CAAW,MAA3B,CAAP;AACH,GAFD;AAIA;;;;;AAGA,EAAA,YAAA,CAAA,SAAA,CAAA,eAAA,GAAA,YAAA;AACI,WAAO;AACH,MAAA,gBAAgB,EAAE,KAAK,cAAL;AADf,KAAP;AAGH,GAJD;AAMA;;;;;AAGA,EAAA,YAAA,CAAA,SAAA,CAAA,MAAA,GAAA,YAAA;AACI,WACI,KAAA,CAAA,aAAA,CAAC,WAAW,CAAC,QAAb,EAAqB;AAAC,MAAA,KAAK,EAAE,KAAK,cAAL;AAAR,KAArB,EACK,KAAK,CAAC,QAAN,CAAe,IAAf,CAAoB,KAAK,KAAL,CAAW,QAA/B,CADL,CADJ;AAKH,GAND;AAjCA;;;;;AAGO,EAAA,YAAA,CAAA,SAAA,GAAY;AACf,IAAA,MAAM,EAAE,SAAS,CAAC;AADH,GAAZ;AAIP;;;;AAGO,EAAA,YAAA,CAAA,iBAAA,GAAoB;AACvB,IAAA,gBAAgB,EAAE,SAAS,CAAC;AADL,GAApB;AA8BX,SAAA,YAAA;AAAC,CAzCD,CAA0C,KAAK,CAAC,SAAhD,CAAA;;eAAqB,Y,EA0CrB","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { IntlService } from './IntlService';\nimport { IntlContext } from './IntlContext';\n// tslint:disable:max-line-length\n/**\n * A React component which provides an internationalization service. Expects a locale string as a property of the component.\n */\nvar IntlProvider = /** @class */ (function (_super) {\n    __extends(IntlProvider, _super);\n    function IntlProvider() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Returns an internationalization service. The method is suitable for overriding when you implement custom internationalization behavior.\n     */\n    IntlProvider.prototype.getIntlService = function () {\n        return new IntlService(this.props.locale);\n    };\n    /**\n     * @hidden\n     */\n    IntlProvider.prototype.getChildContext = function () {\n        return {\n            kendoIntlService: this.getIntlService()\n        };\n    };\n    /**\n     * @hidden\n     */\n    IntlProvider.prototype.render = function () {\n        return (React.createElement(IntlContext.Provider, { value: this.getIntlService() }, React.Children.only(this.props.children)));\n    };\n    /**\n     * @hidden\n     */\n    IntlProvider.propTypes = {\n        locale: PropTypes.string\n    };\n    /**\n     * @hidden\n     */\n    IntlProvider.childContextTypes = {\n        kendoIntlService: PropTypes.object\n    };\n    return IntlProvider;\n}(React.Component));\nexport default IntlProvider;\n// tslint:enable:max-line-length\n//# sourceMappingURL=IntlProvider.js.map"]},"metadata":{},"sourceType":"module"}