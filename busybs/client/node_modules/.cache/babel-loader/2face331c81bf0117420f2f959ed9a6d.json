{"ast":null,"code":"import * as PropTypes from 'prop-types';\nimport { IntlService } from './Intl/IntlService';\nimport { LocalizationService } from './Localization/LocalizationService'; // tslint:disable:max-line-length\n\n/**\n * Provides an internationalization service. When the passed component is a direct or indirect child of `IntlProvider`, the returned service uses the locale of the provider. Otherwise, uses `en` as a default locale. To handle locale changes, call the method on each `render`.\n *\n * @param componentClass - The React component class that will use the internationalization service.\n */\n\nexport function provideIntlService(component) {\n  if (!component && process.env.NODE_ENV !== 'production') {\n    throw \"Passed component - \" + component + \" is invalid.\";\n  }\n\n  var intlServiceFromContext = component.context && component.context.kendoIntlService;\n  return intlServiceFromContext || new IntlService('en');\n}\n/**\n * Provides a localization service. When the passed component is a direct or indirect child of `LocalizationProvider`, the returned service uses the language of the provider. To handle locale changes, call the method on each `render`.\n *\n * @param componentClass - The React component class that will use the internationalization service.\n */\n\nexport function provideLocalizationService(component) {\n  if (!component && process.env.NODE_ENV !== 'production') {\n    throw \"Passed component - \" + component + \" is invalid.\";\n  }\n\n  var localizationServiceFromContext = component.context && component.context.kendoLocalizationService;\n  return localizationServiceFromContext || new LocalizationService();\n}\n/**\n * A method which registers a component class or a functional stateless component for internationalization. When a component of that type is a direct or indirect child of `IntlProvider`, the locale of the provider is used. Otherwise, uses `en` as a default locale.\n *\n * @param component - The React component class that will use the internationalization methods.\n */\n\nexport function registerForIntl(component) {\n  var ctx = {\n    kendoIntlService: PropTypes.object\n  };\n\n  if (component.contextTypes) {\n    Object.assign(component.contextTypes, ctx);\n  } else {\n    component.contextTypes = ctx;\n  }\n}\n/**\n * A method which registers a component class or a stateless functional component for localization. When a component of that type is a direct or indirect child of `LocalizationProvider`, the language of the provider is used.\n *\n * @param component - The React component class that will use the internationalization methods.\n */\n\nexport function registerForLocalization(component) {\n  var ctx = {\n    kendoLocalizationService: PropTypes.object\n  };\n\n  if (component.contextTypes) {\n    Object.assign(component.contextTypes, ctx);\n  } else {\n    component.contextTypes = ctx;\n  }\n} // tslint:enable:max-line-length","map":{"version":3,"sources":["../../src/intlUtils.ts"],"names":[],"mappings":"AACA,OAAO,KAAK,SAAZ,MAA2B,YAA3B;AAEA,SAAS,WAAT,QAA4B,oBAA5B;AACA,SAAS,mBAAT,QAAqC,oCAArC,C,CAIA;;AACA;;;;;;AAKA,OAAM,SAAU,kBAAV,CAA6B,SAA7B,EAAuD;AACzD,MAAI,CAAC,SAAD,IAAc,OAAO,CAAC,GAAR,CAAY,QAAZ,KAAyB,YAA3C,EAAyD;AACrD,UAAM,wBAAsB,SAAtB,GAA+B,cAArC;AACH;;AAED,MAAM,sBAAsB,GAAG,SAAS,CAAC,OAAV,IAAqB,SAAS,CAAC,OAAV,CAAkB,gBAAtE;AAEA,SAAO,sBAAsB,IAAI,IAAI,WAAJ,CAAgB,IAAhB,CAAjC;AACH;AAED;;;;;;AAKA,OAAM,SAAU,0BAAV,CAAqC,SAArC,EAA+D;AACjE,MAAI,CAAC,SAAD,IAAc,OAAO,CAAC,GAAR,CAAY,QAAZ,KAAyB,YAA3C,EAAyD;AACrD,UAAM,wBAAsB,SAAtB,GAA+B,cAArC;AACH;;AAED,MAAM,8BAA8B,GAAG,SAAS,CAAC,OAAV,IAAqB,SAAS,CAAC,OAAV,CAAkB,wBAA9E;AAEA,SAAO,8BAA8B,IAAI,IAAI,mBAAJ,EAAzC;AACH;AAED;;;;;;AAKA,OAAM,SAAU,eAAV,CAA0B,SAA1B,EAAqE;AACvE,MAAM,GAAG,GAAG;AACR,IAAA,gBAAgB,EAAE,SAAS,CAAC;AADpB,GAAZ;;AAIA,MAAI,SAAS,CAAC,YAAd,EAA4B;AACxB,IAAA,MAAM,CAAC,MAAP,CAAc,SAAS,CAAC,YAAxB,EAAsC,GAAtC;AACH,GAFD,MAEO;AACH,IAAA,SAAS,CAAC,YAAV,GAAyB,GAAzB;AACH;AACJ;AAED;;;;;;AAKA,OAAM,SAAU,uBAAV,CAAkC,SAAlC,EAA6E;AAC/E,MAAM,GAAG,GAAG;AACR,IAAA,wBAAwB,EAAE,SAAS,CAAC;AAD5B,GAAZ;;AAIA,MAAI,SAAS,CAAC,YAAd,EAA4B;AACxB,IAAA,MAAM,CAAC,MAAP,CAAc,SAAS,CAAC,YAAxB,EAAsC,GAAtC;AACH,GAFD,MAEO;AACH,IAAA,SAAS,CAAC,YAAV,GAAyB,GAAzB;AACH;AACJ,C,CACD","sourceRoot":"","sourcesContent":["import * as PropTypes from 'prop-types';\nimport { IntlService } from './Intl/IntlService';\nimport { LocalizationService } from './Localization/LocalizationService';\n// tslint:disable:max-line-length\n/**\n * Provides an internationalization service. When the passed component is a direct or indirect child of `IntlProvider`, the returned service uses the locale of the provider. Otherwise, uses `en` as a default locale. To handle locale changes, call the method on each `render`.\n *\n * @param componentClass - The React component class that will use the internationalization service.\n */\nexport function provideIntlService(component) {\n    if (!component && process.env.NODE_ENV !== 'production') {\n        throw \"Passed component - \" + component + \" is invalid.\";\n    }\n    var intlServiceFromContext = component.context && component.context.kendoIntlService;\n    return intlServiceFromContext || new IntlService('en');\n}\n/**\n * Provides a localization service. When the passed component is a direct or indirect child of `LocalizationProvider`, the returned service uses the language of the provider. To handle locale changes, call the method on each `render`.\n *\n * @param componentClass - The React component class that will use the internationalization service.\n */\nexport function provideLocalizationService(component) {\n    if (!component && process.env.NODE_ENV !== 'production') {\n        throw \"Passed component - \" + component + \" is invalid.\";\n    }\n    var localizationServiceFromContext = component.context && component.context.kendoLocalizationService;\n    return localizationServiceFromContext || new LocalizationService();\n}\n/**\n * A method which registers a component class or a functional stateless component for internationalization. When a component of that type is a direct or indirect child of `IntlProvider`, the locale of the provider is used. Otherwise, uses `en` as a default locale.\n *\n * @param component - The React component class that will use the internationalization methods.\n */\nexport function registerForIntl(component) {\n    var ctx = {\n        kendoIntlService: PropTypes.object\n    };\n    if (component.contextTypes) {\n        Object.assign(component.contextTypes, ctx);\n    }\n    else {\n        component.contextTypes = ctx;\n    }\n}\n/**\n * A method which registers a component class or a stateless functional component for localization. When a component of that type is a direct or indirect child of `LocalizationProvider`, the language of the provider is used.\n *\n * @param component - The React component class that will use the internationalization methods.\n */\nexport function registerForLocalization(component) {\n    var ctx = {\n        kendoLocalizationService: PropTypes.object\n    };\n    if (component.contextTypes) {\n        Object.assign(component.contextTypes, ctx);\n    }\n    else {\n        component.contextTypes = ctx;\n    }\n}\n// tslint:enable:max-line-length\n//# sourceMappingURL=intlUtils.js.map"]},"metadata":{},"sourceType":"module"}